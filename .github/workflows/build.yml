# .github/workflows/build-and-package.yml
name: Build & Package Multi-Platform VSIX

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1) Build x64 binaries on GitHub-hosted runners (Linux, Windows, macOS Intel)
  build-binaries-x64:
    name: Build sqlite3 on ${{ matrix.os }}-x64
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install build essentials on Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential

      - name: Confirm macOS CLI on Intel
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "macOS Intel runner"

      - name: Confirm Python on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python --version

      - name: Install dependencies without scripts
        shell: bash
        run: npm ci --ignore-scripts

      - name: Build sqlite3 binding (x64)
        shell: bash
        run: npm rebuild @vscode/sqlite3 --build-from-source --target_arch=x64

      - name: Copy x64 .node
        shell: bash
        run: |
          mkdir -p binaries
          cp node_modules/@vscode/sqlite3/build/Release/vscode-sqlite3.node binaries/vscode-sqlite3-darwin-x64.node

      - name: Upload x64 binaries
        uses: actions/upload-artifact@v4
        with:
          name: sqlite3-binaries-${{ matrix.os }}-x64
          path: binaries/

  # 2) Build arm64 macOS binary on GitHub-hosted ARM64 runner
  build-binaries-macos-arm64:
    name: Build sqlite3 on macOS-arm64
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Confirm ARM64 runner
        shell: bash
        run: echo "macOS ARM64 runner"

      - name: Install dependencies without scripts
        shell: bash
        run: npm ci --ignore-scripts

      - name: Build sqlite3 binding (arm64)
        shell: bash
        run: npm rebuild @vscode/sqlite3 --build-from-source --target_arch=arm64

      - name: Copy arm64 .node
        shell: bash
        run: |
          mkdir -p binaries
          cp node_modules/@vscode/sqlite3/build/Release/vscode-sqlite3.node binaries/vscode-sqlite3-darwin-arm64.node

      - name: Upload arm64 macOS binary
        uses: actions/upload-artifact@v4
        with:
          name: sqlite3-binaries-macos-arm64
          path: binaries/

  # 3) Create macOS Universal2 & package VSIX
  package-vsix:
    name: Download binaries & package VSIX
    runs-on: macos-latest  # needs lipo available
    needs: [build-binaries-x64, build-binaries-macos-arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Create macOS Universal2
        shell: bash
        run: |
          lipo -create \
            binaries/vscode-sqlite3-darwin-x64.node \
            binaries/vscode-sqlite3-darwin-arm64.node \
            -output binaries/vscode-sqlite3-darwin-universal2.node

      - name: Install production deps
        shell: bash
        run: npm ci --omit=dev

      - name: Package VSIX
        shell: bash
        run: npx vsce package --out claude-context-manager.vsix

      - name: Upload VSIX
        uses: actions/upload-artifact@v4
        with:
          name: claude-context-manager.vsix
          path: claude-context-manager.vsix