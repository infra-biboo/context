# .github/workflows/build-and-package.yml
name: Build & Package Multi-Platform VSIX

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1) Build x64 binaries on GitHub-hosted runners (Linux, Windows, macOS Intel & Apple Silicon)
  build-binaries-x64:
    name: Build sqlite3 on ${{ matrix.os }}-x64
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python (for node-gyp)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install build tools on Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential

      - name: Confirm Xcode CLI on macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "Using pre-installed Xcode Command Line Tools"

      - name: Install Python on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install python --version=3.9.0 -y

      - name: Install dependencies without scripts
        shell: bash
        run: |
          npm ci --ignore-scripts

      - name: Build sqlite3 native binding from source
        shell: bash
        run: |
          npm rebuild @vscode/sqlite3 --build-from-source

      - name: Copy compiled .node to binaries/
        shell: bash
        run: |
          mkdir -p binaries
          node -e '
            const fs = require("fs"), path = require("path"), os = require("os");
            const plat = os.platform(), arch = os.arch();
            const src = path.join("node_modules","@vscode","sqlite3","build","Release","vscode-sqlite3.node");
            const dst = path.join("binaries", `vscode-sqlite3-${plat}-${arch}.node`);
            fs.copyFileSync(src, dst);
          '

      - name: Upload x64 binaries
        uses: actions/upload-artifact@v4
        with:
          name: sqlite3-binaries-${{ matrix.os }}-x64
          path: binaries/

  # 2) Build arm64 macOS binary on a self-hosted ARM Mac runner
  build-binaries-macos-arm64:
    name: Build sqlite3 on macOS-arm64
    runs-on: [self-hosted, macos, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python (for node-gyp)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Confirm Xcode CLI on macOS ARM
        shell: bash
        run: |
          xcode-select --install || true

      - name: Install dependencies without scripts
        shell: bash
        run: |
          npm ci --ignore-scripts

      - name: Build sqlite3 native binding from source
        shell: bash
        run: |
          npm rebuild @vscode/sqlite3 --build-from-source

      - name: Copy compiled .node to binaries/
        shell: bash
        run: |
          mkdir -p binaries
          node -e '
            const fs = require("fs"), path = require("path"), os = require("os");
            const plat = os.platform(), arch = os.arch();
            const src = path.join("node_modules","@vscode","sqlite3","build","Release","vscode-sqlite3.node");
            const dst = path.join("binaries", `vscode-sqlite3-${plat}-${arch}.node`);
            fs.copyFileSync(src, dst);
          '

      - name: Upload arm64 macOS binary
        uses: actions/upload-artifact@v4
        with:
          name: sqlite3-binaries-macos-arm64
          path: binaries/

  # 3) Collect all binaries and produce the VSIX
  package-vsix:
    name: Download binaries & package VSIX
    runs-on: ubuntu-latest
    needs: [build-binaries-x64, build-binaries-macos-arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all binaries
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Install production dependencies
        shell: bash
        run: npm ci --omit=dev

      - name: Package VSIX
        shell: bash
        run: npx vsce package --out claude-context-manager.vsix

      - name: Upload VSIX
        uses: actions/upload-artifact@v4
        with:
          name: claude-context-manager.vsix
          path: claude-context-manager.vsix