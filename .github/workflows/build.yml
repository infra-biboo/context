# .github/workflows/build-and-package.yml
name: Build & Package Multi-Platform VSIX

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-binaries:
    name: Build sqlite3 (${{ matrix.os }}/${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
          - os: windows-latest
            arch: x64
          - os: macos-latest
            arch: x64
          - os: macos-latest
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js v20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install build tools on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
        shell: bash

      - name: Install Xcode CLI on macOS
        if: matrix.os == 'macos-latest'
        run: xcode-select --install || true
        shell: bash

      # Windows already incluye Build Tools y Python preinstalados
      - name: Verify Windows Build Tools
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          # Confirma que `msbuild` y `python` existen
          Get-Command msbuild
          python --version

      - name: Install dependencies without scripts
        run: npm ci --ignore-scripts
        shell: bash

      - name: Rebuild sqlite3 for ${{ matrix.arch }}
        run: npm rebuild @vscode/sqlite3 --build-from-source --target_arch=${{ matrix.arch }}
        shell: bash

      - name: Copy native module to artifacts
        run: |
          mkdir -p binaries
          cp node_modules/@vscode/sqlite3/build/Release/vscode-sqlite3.node \
             binaries/vscode-sqlite3-${{ matrix.os }}-${{ matrix.arch }}.node
        shell: bash

      - name: Upload sqlite3 binary
        uses: actions/upload-artifact@v4
        with:
          name: sqlite3-binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: binaries/vscode-sqlite3-${{ matrix.os }}-${{ matrix.arch }}.node

  package-vsix:
    name: Create macOS universal2 & package VSIX
    runs-on: macos-latest
    needs: build-binaries

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all sqlite3 binaries
        uses: actions/download-artifact@v4
        with:
          path: binaries/

      - name: Build macOS universal2
        run: |
          # Combina el slice Intel + ARM en un Ãºnico .node universal2
          lipo -create \
            binaries/vscode-sqlite3-macos-latest-x64.node \
            binaries/vscode-sqlite3-macos-latest-arm64.node \
            -output binaries/vscode-sqlite3-darwin-universal2.node
        shell: bash

      - name: Install production deps (sin postinstall)
        run: npm ci --omit=dev --ignore-scripts
        shell: bash

      - name: Package VSIX
        run: npx vsce package --out claude-context-manager.vsix
        shell: bash

      - name: Upload VSIX
        uses: actions/upload-artifact@v4
        with:
          name: claude-context-manager.vsix
          path: claude-context-manager.vsix
